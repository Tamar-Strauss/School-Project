"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.axiosSource = exports.axiosService = exports.AxiosService = void 0;
var axios_1 = require("axios");
var qs_1 = require("qs");
function isEmpty(val) {
    if (typeof val === 'undefined' || val === null || val === '') {
        return true;
    }
    else {
        return false;
    }
}
var AxiosService = /** @class */ (function () {
    function AxiosService() {
        this.methodMap = {
            post: 'post',
            postjson: 'post',
            patch: 'patch',
            patchjson: 'patch',
            put: 'put',
            putjson: 'put',
            file: 'post',
            get: 'get',
            delete: 'delete',
            options: 'options',
            head: 'head',
        };
        this.filter = {
            filterCode: function (result, type) {
                if (type === 'head') {
                    return true;
                }
                return result && Number(result.code) >= 200 && Number(result.code) < 300;
            },
            filterHttpError: function (error, type) {
            },
        };
        this.beforeRequest = null;
    }
    AxiosService.prototype.doRequest = function (requestUrl, requestParams, type, requestConfig) {
        var than = this;
        var params = {};
        if (isEmpty(requestParams)) {
            params = {};
        }
        else {
            params = requestParams;
        }
        var p = new Promise(function (resolve, reject) {
            var method = than.methodMap[type];
            var optionSource = {};
            var options = __assign(__assign({}, requestConfig), { method: method, url: requestUrl, data: {}, params: {} });
            switch (type) {
                case 'put':
                case 'patch':
                case 'post':
                    options.data = than.setHttpParams(params);
                    break;
                case 'patchjson':
                case 'postjson':
                case 'putjson':
                    options.data = params;
                    break;
                case 'get':
                case 'delete':
                case 'options':
                case 'head':
                    options.params = params;
                    break;
                default:
                    break;
            }
            var beforeRequest = (requestConfig && requestConfig.beforeRequest) || than.beforeRequest;
            if (beforeRequest) {
                options = beforeRequest(options) || {};
            }
            (0, axios_1.default)(options)
                .then(function (response) {
                var result = response.data;
                if (than.filter.filterCode(result, type)) {
                    resolve(result);
                }
                else {
                    reject(result);
                }
            })
                .catch(function (error) {
                than.filter.filterHttpError(error, type);
                var newError = {
                    code: error && error.status,
                    errorType: 'http',
                    message: error && error.message,
                    originError: error,
                };
                reject(newError);
            });
        });
        return p;
    };
    ;
    // 构造HttpParams数据类型
    AxiosService.prototype.setHttpParams = function (params) {
        return qs_1.default.stringify(params);
    };
    ;
    /**
     * post
     * @param url 请求路径
     * @param params 请求参数，没有可以传null
     * @param requestConfig 请求配置项
    */
    AxiosService.prototype.post = function (url, params, requestConfig) {
        return this.doRequest(url, params, 'postjson', requestConfig);
    };
    ;
    /**
     * post request payload
     * @param url 请求路径
     * @param params 请求参数，没有可以传null
     * @param requestConfig 请求配置项
     */
    AxiosService.prototype.postByJson = function (url, params, requestConfig) {
        return this.doRequest(url, params, 'postjson', requestConfig);
    };
    ;
    /**
     * patch
     * @param url 请求路径
     * @param params 请求参数，没有可以传null
     * @param requestConfig 请求配置项
     */
    AxiosService.prototype.patch = function (url, params, requestConfig) {
        return this.doRequest(url, params, 'patch', requestConfig);
    };
    ;
    /**
     * patch equest payload
     * @param url 请求路径
     * @param params 请求参数，没有可以传null
     * @param requestConfig 请求配置项
     */
    AxiosService.prototype.patchByJson = function (url, params, requestConfig) {
        return this.doRequest(url, params, 'patchjson', requestConfig);
    };
    ;
    /**
     * put
     * @param url 请求路径
     * @param params 请求参数，没有可以传null
     * @param requestConfig 请求配置项
     */
    AxiosService.prototype.put = function (url, params, requestConfig) {
        return this.doRequest(url, params, 'put', requestConfig);
    };
    ;
    /**
     * put request payload
     * @param url 请求路径
     * @param params 请求参数，没有可以传null
     * @param requestConfig 请求配置项
     */
    AxiosService.prototype.putByJson = function (url, params, requestConfig) {
        return this.doRequest(url, params, 'putjson', requestConfig);
    };
    ;
    /**
     * upload file 支持IE10以上浏览器
     * @param url 请求路径
     * @param params 请求参数对象，其中必须有一个字段为上传对象，如 file:nativeFile
     * @param requestConfig 请求配置项
     */
    AxiosService.prototype.upload = function (url, params, requestConfig) {
        return this.doRequest(url, params, 'file', requestConfig);
    };
    ;
    /**
     * get
     * @param url 请求路径
     * @param params 请求参数，没有可以传null
     * @param requestConfig 请求配置项
     */
    AxiosService.prototype.get = function (url, params, requestConfig) {
        return this.doRequest(url, params, 'get', requestConfig);
    };
    ;
    /**
     * delete
     * @param url 请求路径
     * @param params 请求参数，没有可以传null
     * @param requestConfig 请求配置项
     */
    AxiosService.prototype.delete = function (url, params, requestConfig) {
        return this.doRequest(url, params, 'delete', requestConfig);
    };
    ;
    AxiosService.prototype.setFilterCode = function (fn) {
        this.filter.filterCode = fn;
    };
    ;
    AxiosService.prototype.setBeforRequest = function (fn) {
        this.beforeRequest = fn;
    };
    return AxiosService;
}());
exports.AxiosService = AxiosService;
exports.axiosService = new AxiosService();
exports.axiosSource = axios_1.default;
//# sourceMappingURL=request.js.map